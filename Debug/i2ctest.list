
i2ctest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d4  080058d4  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058dc  080058dc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058dc  080058dc  000068dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080058e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080058f0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080058f0  00007158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013368  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266a  00000000  00000000  0001a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e60  00000000  00000000  0001dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002093b  00000000  00000000  0001eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014451  00000000  00000000  0003f3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d71  00000000  00000000  0005383c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  0011c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001213bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005874 	.word	0x08005874

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005874 	.word	0x08005874

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <process_command>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(uint8_t rx_buffer[1]) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rx_buffer[0]);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <process_command+0x20>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	2000007c 	.word	0x2000007c

0800051c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000520:	f000 fc29 	bl	8000d76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000524:	f000 f81e 	bl	8000564 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000528:	f000 f996 	bl	8000858 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800052c:	f000 f964 	bl	80007f8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000530:	f000 f87a 	bl	8000628 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000534:	f000 f8ba 	bl	80006ac <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000538:	2100      	movs	r1, #0
 800053a:	4808      	ldr	r0, [pc, #32]	@ (800055c <main+0x40>)
 800053c:	f004 fb36 	bl	8004bac <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000540:	2104      	movs	r1, #4
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <main+0x40>)
 8000544:	f004 fb32 	bl	8004bac <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000548:	2108      	movs	r1, #8
 800054a:	4804      	ldr	r0, [pc, #16]	@ (800055c <main+0x40>)
 800054c:	f004 fb2e 	bl	8004bac <HAL_TIMEx_PWMN_Start>
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <main+0x44>)
 8000552:	f001 f967 	bl	8001824 <HAL_I2C_EnableListen_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x3a>
 800055a:	bf00      	nop
 800055c:	2000007c 	.word	0x2000007c
 8000560:	20000028 	.word	0x20000028

08000564 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b096      	sub	sp, #88	@ 0x58
 8000568:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2244      	movs	r2, #68	@ 0x44
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 f951 	bl	800581a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000586:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058a:	f002 fd2f 	bl	8002fec <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000594:	f000 fa00 	bl	8000998 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000598:	f002 fd0a 	bl	8002fb0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <SystemClock_Config+0xc0>)
 800059e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005a2:	4a20      	ldr	r2, [pc, #128]	@ (8000624 <SystemClock_Config+0xc0>)
 80005a4:	f023 0318 	bic.w	r3, r3, #24
 80005a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80005ac:	2314      	movs	r3, #20
 80005ae:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005bc:	2360      	movs	r3, #96	@ 0x60
 80005be:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fd59 	bl	8003098 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x8c>
		Error_Handler();
 80005ec:	f000 f9d4 	bl	8000998 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2303      	movs	r3, #3
 80005f6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000604:	463b      	mov	r3, r7
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f003 f959 	bl	80038c0 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb4>
		Error_Handler();
 8000614:	f000 f9c0 	bl	8000998 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000618:	f003 fd6c 	bl	80040f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	@ 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 800062e:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000630:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 8000632:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <MX_I2C1_Init+0x80>)
 8000636:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 210;
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_I2C1_Init+0x78>)
 800063a:	22d2      	movs	r2, #210	@ 0xd2
 800063c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_I2C1_Init+0x78>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000658:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800065c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000660:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000664:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000666:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000668:	f000 fedc 	bl	8001424 <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4e>
		Error_Handler();
 8000672:	f000 f991 	bl	8000998 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x78>)
 800067a:	f002 fc01 	bl	8002e80 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x60>
			!= HAL_OK) {
		Error_Handler();
 8000684:	f000 f988 	bl	8000998 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_I2C1_Init+0x78>)
 800068c:	f002 fc43 	bl	8002f16 <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x72>
		Error_Handler();
 8000696:	f000 f97f 	bl	8000998 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00b07cb4 	.word	0x00b07cb4

080006ac <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	222c      	movs	r2, #44	@ 0x2c
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 f89e 	bl	800581a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006de:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006e0:	4a44      	ldr	r2, [pc, #272]	@ (80007f4 <MX_TIM1_Init+0x148>)
 80006e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80006e4:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b41      	ldr	r3, [pc, #260]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 255;
 80006f0:	4b3f      	ldr	r3, [pc, #252]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006f2:	22ff      	movs	r2, #255	@ 0xff
 80006f4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006fc:	4b3c      	ldr	r3, [pc, #240]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000702:	4b3b      	ldr	r3, [pc, #236]	@ (80007f0 <MX_TIM1_Init+0x144>)
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000708:	4839      	ldr	r0, [pc, #228]	@ (80007f0 <MX_TIM1_Init+0x144>)
 800070a:	f003 fdf5 	bl	80042f8 <HAL_TIM_PWM_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8000714:	f000 f940 	bl	8000998 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000724:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000728:	4619      	mov	r1, r3
 800072a:	4831      	ldr	r0, [pc, #196]	@ (80007f0 <MX_TIM1_Init+0x144>)
 800072c:	f004 fadc 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000736:	f000 f92f 	bl	8000998 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073a:	2360      	movs	r3, #96	@ 0x60
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000746:	2300      	movs	r3, #0
 8000748:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000756:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	4824      	ldr	r0, [pc, #144]	@ (80007f0 <MX_TIM1_Init+0x144>)
 8000760:	f003 fe22 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800076a:	f000 f915 	bl	8000998 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800076e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000772:	2204      	movs	r2, #4
 8000774:	4619      	mov	r1, r3
 8000776:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <MX_TIM1_Init+0x144>)
 8000778:	f003 fe16 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000782:	f000 f909 	bl	8000998 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800078a:	2208      	movs	r2, #8
 800078c:	4619      	mov	r1, r3
 800078e:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <MX_TIM1_Init+0x144>)
 8000790:	f003 fe0a 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 800079a:	f000 f8fd 	bl	8000998 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80007d4:	f004 faee 	bl	8004db4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x136>
			!= HAL_OK) {
		Error_Handler();
 80007de:	f000 f8db 	bl	8000998 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80007e2:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <MX_TIM1_Init+0x144>)
 80007e4:	f000 f98a 	bl	8000afc <HAL_TIM_MspPostInit>

}
 80007e8:	bf00      	nop
 80007ea:	3758      	adds	r7, #88	@ 0x58
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	@ (8000854 <MX_USART2_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART2_UART_Init+0x58>)
 800083c:	f004 fb57 	bl	8004eee <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000846:	f000 f8a7 	bl	8000998 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000c8 	.word	0x200000c8
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a16      	ldr	r2, [pc, #88]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_GPIO_Init+0x8c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <MX_GPIO_Init+0x90>)
 80008bc:	f000 fd9a 	bl	80013f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_GPIO_Init+0x90>)
 80008d8:	f000 fc22 	bl	8001120 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
// Called when master addresses the slave
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	4613      	mov	r3, r2
 80008fa:	803b      	strh	r3, [r7, #0]
	if (hi2c->Instance == hi2c1.Instance) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_I2C_AddrCallback+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d114      	bne.n	8000932 <HAL_I2C_AddrCallback+0x46>
		if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d107      	bne.n	800091e <HAL_I2C_AddrCallback+0x32>
			// Master wants to write to slave
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, i2c_rx_buffer, 1,
 800090e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000912:	2201      	movs	r2, #1
 8000914:	490a      	ldr	r1, [pc, #40]	@ (8000940 <HAL_I2C_AddrCallback+0x54>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fed2 	bl	80016c0 <HAL_I2C_Slave_Seq_Receive_IT>
			// Master wants to read from slave — not supported in this example
			uint8_t dummy_data = 0x00;
			HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &dummy_data, 1, I2C_NEXT_FRAME);
		}
	}
}
 800091c:	e009      	b.n	8000932 <HAL_I2C_AddrCallback+0x46>
			uint8_t dummy_data = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
			HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &dummy_data, 1, I2C_NEXT_FRAME);
 8000922:	f107 010f 	add.w	r1, r7, #15
 8000926:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800092a:	2201      	movs	r2, #1
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fe15 	bl	800155c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000028 	.word	0x20000028
 8000940:	20000150 	.word	0x20000150

08000944 <HAL_I2C_SlaveRxCpltCallback>:

// Called when slave has received data
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d102      	bne.n	800095e <HAL_I2C_SlaveRxCpltCallback+0x1a>
		process_command(i2c_rx_buffer);
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800095a:	f7ff fdcd 	bl	80004f8 <process_command>
	}
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000028 	.word	0x20000028
 800096c:	20000150 	.word	0x20000150

08000970 <HAL_I2C_ListenCpltCallback>:

// Called when master stops communication
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_I2C_ListenCpltCallback+0x24>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d102      	bne.n	800098a <HAL_I2C_ListenCpltCallback+0x1a>
		// Restart listening
		HAL_I2C_EnableListen_IT(hi2c);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 ff4d 	bl	8001824 <HAL_I2C_EnableListen_IT>
	}
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000028 	.word	0x20000028

08000998 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09e      	sub	sp, #120	@ 0x78
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2254      	movs	r2, #84	@ 0x54
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 ff04 	bl	800581a <memset>
  if(hi2c->Instance==I2C1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a26      	ldr	r2, [pc, #152]	@ (8000ab0 <HAL_I2C_MspInit+0xc4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d145      	bne.n	8000aa8 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a1c:	2340      	movs	r3, #64	@ 0x40
 8000a1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f96d 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a34:	f7ff ffb0 	bl	8000998 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a50:	23c0      	movs	r3, #192	@ 0xc0
 8000a52:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <HAL_I2C_MspInit+0xcc>)
 8000a6c:	f000 fb58 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a74:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_I2C_MspInit+0xc8>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	201f      	movs	r0, #31
 8000a8e:	f000 fac2 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a92:	201f      	movs	r0, #31
 8000a94:	f000 fadb 	bl	800104e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2020      	movs	r0, #32
 8000a9e:	f000 faba 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000aa2:	2020      	movs	r0, #32
 8000aa4:	f000 fad3 	bl	800104e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3778      	adds	r7, #120	@ 0x78
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400

08000abc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10b      	bne.n	8000ae6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad2:	4a09      	ldr	r2, [pc, #36]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ad8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <HAL_TIM_MspPostInit+0x9c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d138      	bne.n	8000b90 <HAL_TIM_MspPostInit+0x94>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a18      	ldr	r2, [pc, #96]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_TIM_MspPostInit+0xa0>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6c:	f000 fad8 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <HAL_TIM_MspPostInit+0xa4>)
 8000b8c:	f000 fac8 	bl	8001120 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	@ 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09e      	sub	sp, #120	@ 0x78
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2254      	movs	r2, #84	@ 0x54
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fe28 	bl	800581a <memset>
  if(huart->Instance==USART2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <HAL_UART_MspInit+0xcc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d148      	bne.n	8000c66 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f891 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f7ff fed4 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a19      	ldr	r2, [pc, #100]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_UART_MspInit+0xd0>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c20:	2304      	movs	r3, #4
 8000c22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f000 fa6f 	bl	8001120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c54:	2303      	movs	r3, #3
 8000c56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f000 fa5d 	bl	8001120 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c66:	bf00      	nop
 8000c68:	3778      	adds	r7, #120	@ 0x78
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40021000 	.word	0x40021000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f000 f8a7 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <I2C1_EV_IRQHandler+0x10>)
 8000cde:	f000 fdc1 	bl	8001864 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028

08000cec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <I2C1_ER_IRQHandler+0x10>)
 8000cf2:	f000 fdd1 	bl	8001898 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000028 	.word	0x20000028

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff ffea 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	@ (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	@ (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	@ (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f004 fd6b 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d56:	f7ff fbe1 	bl	800051c <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d5c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d68:	080058e4 	.word	0x080058e4
  ldr r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d70:	20000158 	.word	0x20000158

08000d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_IRQHandler>

08000d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f93d 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f80e 	bl	8000da8 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	e001      	b.n	8000d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d98:	f7ff fe04 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d023      	beq.n	8000e04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_InitTick+0x70>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <HAL_InitTick+0x6c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f949 	bl	800106a <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10f      	bne.n	8000dfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d809      	bhi.n	8000df8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dec:	f000 f913 	bl	8001016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_InitTick+0x74>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e004      	b.n	8000e08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e001      	b.n	8000e08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000154 	.word	0x20000154

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000154 	.word	0x20000154

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff3e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff31 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d005      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e029      	b.n	80010fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 020e 	bic.w	r2, r2, #14
 80010b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f003 021c 	and.w	r2, r3, #28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
    }
  }
  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e148      	b.n	80013c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 813a 	beq.w	80013bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0203 	and.w	r2, r3, #3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8094 	beq.w	80013bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b52      	ldr	r3, [pc, #328]	@ (80013e0 <HAL_GPIO_Init+0x2c0>)
 8001296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001298:	4a51      	ldr	r2, [pc, #324]	@ (80013e0 <HAL_GPIO_Init+0x2c0>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a0:	4b4f      	ldr	r3, [pc, #316]	@ (80013e0 <HAL_GPIO_Init+0x2c0>)
 80012a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a4d      	ldr	r2, [pc, #308]	@ (80013e4 <HAL_GPIO_Init+0x2c4>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1d4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a43      	ldr	r2, [pc, #268]	@ (80013e8 <HAL_GPIO_Init+0x2c8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1d0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <HAL_GPIO_Init+0x2cc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1cc>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e004      	b.n	80012f6 <HAL_GPIO_Init+0x1d6>
 80012ec:	2307      	movs	r3, #7
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0x1d6>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <HAL_GPIO_Init+0x1d6>
 80012f4:	2300      	movs	r3, #0
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4093      	lsls	r3, r2
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001306:	4937      	ldr	r1, [pc, #220]	@ (80013e4 <HAL_GPIO_Init+0x2c4>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001314:	4b36      	ldr	r3, [pc, #216]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001338:	4a2d      	ldr	r2, [pc, #180]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800133e:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138c:	4a18      	ldr	r2, [pc, #96]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <HAL_GPIO_Init+0x2d0>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f aeaf 	bne.w	8001130 <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	48000400 	.word	0x48000400
 80013ec:	48000800 	.word	0x48000800
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e002      	b.n	8001418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e08d      	b.n	8001552 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff face 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2224      	movs	r2, #36	@ 0x24
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e006      	b.n	80014ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d108      	bne.n	80014c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	e007      	b.n	80014d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69d9      	ldr	r1, [r3, #28]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001578:	2b28      	cmp	r3, #40	@ 0x28
 800157a:	f040 8098 	bne.w	80016ae <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08c      	b.n	80016b0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001596:	f248 0101 	movw	r1, #32769	@ 0x8001
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f001 fc12 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e080      	b.n	80016b0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b2a      	cmp	r3, #42	@ 0x2a
 80015c0:	d12a      	bne.n	8001618 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80015c2:	2102      	movs	r1, #2
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f001 fbfd 	bl	8002dc4 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015d8:	d11e      	bne.n	8001618 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd3f 	bl	8001082 <HAL_DMA_Abort_IT>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800160e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001614:	4610      	mov	r0, r2
 8001616:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2229      	movs	r2, #41	@ 0x29
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800163c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800165e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b08      	cmp	r3, #8
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2208      	movs	r2, #8
 8001696:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80016a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f001 fb09 	bl	8002cbc <I2C_Enable_IRQ>

    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08002c1b 	.word	0x08002c1b
 80016bc:	080019e7 	.word	0x080019e7

080016c0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80016dc:	2b28      	cmp	r3, #40	@ 0x28
 80016de:	f040 8098 	bne.w	8001812 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08c      	b.n	8001814 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80016fa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f001 fb60 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800170e:	2302      	movs	r3, #2
 8001710:	e080      	b.n	8001814 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b29      	cmp	r3, #41	@ 0x29
 8001724:	d12a      	bne.n	800177c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001726:	2101      	movs	r1, #1
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f001 fb4b 	bl	8002dc4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800173c:	d11e      	bne.n	800177c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800174c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001752:	2b00      	cmp	r3, #0
 8001754:	d012      	beq.n	800177c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	4a30      	ldr	r2, [pc, #192]	@ (800181c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 800175c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc8d 	bl	8001082 <HAL_DMA_Abort_IT>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001778:	4610      	mov	r0, r2
 800177a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	222a      	movs	r2, #42	@ 0x2a
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80017c2:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	bf0c      	ite	eq
 80017d2:	2301      	moveq	r3, #1
 80017d4:	2300      	movne	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001804:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f001 fa57 	bl	8002cbc <I2C_Enable_IRQ>

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	08002c1b 	.word	0x08002c1b
 8001820:	080019e7 	.word	0x080019e7

08001824 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	d10d      	bne.n	8001854 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2228      	movs	r2, #40	@ 0x28
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <HAL_I2C_EnableListen_IT+0x3c>)
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 fa36 	bl	8002cbc <I2C_Enable_IRQ>

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	080019e7 	.word	0x080019e7

08001864 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
  }
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d010      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	09db      	lsrs	r3, r3, #7
 80018c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00a      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	0a9b      	lsrs	r3, r3, #10
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d010      	beq.n	800190c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	09db      	lsrs	r3, r3, #7
 80018ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f043 0208 	orr.w	r2, r3, #8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d010      	beq.n	800193a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	09db      	lsrs	r3, r3, #7
 800191c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001938:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 030b 	and.w	r3, r3, #11
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f001 f829 	bl	80029a4 <I2C_ITError>
  }
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <I2C_Slave_ISR_IT+0x24>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0ed      	b.n	8001be6 <I2C_Slave_ISR_IT+0x200>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fdf9 	bl	8002624 <I2C_ITSlaveCplt>
 8001a32:	e0d3      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d04d      	beq.n	8001adc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d047      	beq.n	8001adc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d128      	bne.n	8001aa8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b28      	cmp	r3, #40	@ 0x28
 8001a60:	d108      	bne.n	8001a74 <I2C_Slave_ISR_IT+0x8e>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a68:	d104      	bne.n	8001a74 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a6a:	6939      	ldr	r1, [r7, #16]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 ff43 	bl	80028f8 <I2C_ITListenCplt>
 8001a72:	e032      	b.n	8001ada <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b29      	cmp	r3, #41	@ 0x29
 8001a7e:	d10e      	bne.n	8001a9e <I2C_Slave_ISR_IT+0xb8>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a86:	d00a      	beq.n	8001a9e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f001 f89e 	bl	8002bd2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fc9c 	bl	80023d4 <I2C_ITSlaveSeqCplt>
 8001a9c:	e01d      	b.n	8001ada <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001aa6:	e096      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f043 0204 	orr.w	r2, r3, #4
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <I2C_Slave_ISR_IT+0xe6>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac8:	f040 8085 	bne.w	8001bd6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 ff66 	bl	80029a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ad8:	e07d      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1f0>
 8001ada:	e07c      	b.n	8001bd6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d030      	beq.n	8001b4a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d02a      	beq.n	8001b4a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d018      	beq.n	8001b30 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d14f      	bne.n	8001bda <I2C_Slave_ISR_IT+0x1f4>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b40:	d04b      	beq.n	8001bda <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 fc46 	bl	80023d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b48:	e047      	b.n	8001bda <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fb74 	bl	8002252 <I2C_ITAddrCplt>
 8001b6a:	e037      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d031      	beq.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02b      	beq.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d018      	beq.n	8001bc0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001bbe:	e00d      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc6:	d002      	beq.n	8001bce <I2C_Slave_ISR_IT+0x1e8>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fc00 	bl	80023d4 <I2C_ITSlaveSeqCplt>
 8001bd4:	e002      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001bda:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b088      	sub	sp, #32
 8001bf2:	af02      	add	r7, sp, #8
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <I2C_Master_ISR_DMA+0x1a>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e0f0      	b.n	8001dea <I2C_Master_ISR_DMA+0x1fc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d017      	beq.n	8001c4c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d011      	beq.n	8001c4c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 f83c 	bl	8002cbc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 ffc4 	bl	8002bd2 <I2C_Flush_TXDR>
 8001c4a:	e0c9      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	09db      	lsrs	r3, r3, #7
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8081 	beq.w	8001d5c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d07a      	beq.n	8001d5c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c74:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05c      	beq.n	8001d3a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c8c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2bff      	cmp	r3, #255	@ 0xff
 8001c96:	d914      	bls.n	8001cc2 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d103      	bne.n	8001cb4 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001cb2:	e002      	b.n	8001cba <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	22ff      	movs	r2, #255	@ 0xff
 8001cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001cba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e010      	b.n	8001ce4 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cd4:	d003      	beq.n	8001cde <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e002      	b.n	8001ce4 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	8a79      	ldrh	r1, [r7, #18]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 ffb0 	bl	8002c58 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b22      	cmp	r3, #34	@ 0x22
 8001d14:	d108      	bne.n	8001d28 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d26:	e05b      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d38:	e052      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d48:	d003      	beq.n	8001d52 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fb05 	bl	800235a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d50:	e046      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d52:	2140      	movs	r1, #64	@ 0x40
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fe25 	bl	80029a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d5a:	e041      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d029      	beq.n	8001dbc <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d119      	bne.n	8001db2 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d8c:	d027      	beq.n	8001dde <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d96:	d108      	bne.n	8001daa <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001da6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001da8:	e019      	b.n	8001dde <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fad5 	bl	800235a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001db0:	e015      	b.n	8001dde <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001db2:	2140      	movs	r1, #64	@ 0x40
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fdf5 	bl	80029a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001dba:	e010      	b.n	8001dde <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fb5a 	bl	8002490 <I2C_ITMasterCplt>
 8001ddc:	e000      	b.n	8001de0 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8001dde:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001e00:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <I2C_Mem_ISR_DMA+0x260>)
 8001e02:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <I2C_Mem_ISR_DMA+0x1e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e139      	b.n	8002086 <I2C_Mem_ISR_DMA+0x292>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d017      	beq.n	8001e56 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d011      	beq.n	8001e56 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f043 0204 	orr.w	r2, r3, #4
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001e46:	2120      	movs	r1, #32
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 ff37 	bl	8002cbc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 febf 	bl	8002bd2 <I2C_Flush_TXDR>
 8001e54:	e112      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00f      	beq.n	8001e82 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e80:	e0fc      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	09db      	lsrs	r3, r3, #7
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06e      	beq.n	8001f6c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	099b      	lsrs	r3, r3, #6
 8001e92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d068      	beq.n	8001f6c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 ff91 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 ff09 	bl	8002cbc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d056      	beq.n	8001f62 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d91e      	bls.n	8001efc <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d103      	bne.n	8001eda <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ed8:	e002      	b.n	8001ee0 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	@ 0xff
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 feaf 	bl	8002c58 <I2C_TransferConfig>
 8001efa:	e011      	b.n	8001f20 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	b299      	uxth	r1, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fe9c 	bl	8002c58 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b22      	cmp	r3, #34	@ 0x22
 8001f3c:	d108      	bne.n	8001f50 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f4e:	e095      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f60:	e08c      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f62:	2140      	movs	r1, #64	@ 0x40
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fd1d 	bl	80029a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001f6a:	e087      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d071      	beq.n	800205c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d06b      	beq.n	800205c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f84:	2101      	movs	r1, #1
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 ff1c 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fe94 	bl	8002cbc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b22      	cmp	r3, #34	@ 0x22
 8001f9e:	d101      	bne.n	8001fa4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8002058 <I2C_Mem_ISR_DMA+0x264>)
 8001fa2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2bff      	cmp	r3, #255	@ 0xff
 8001fac:	d91e      	bls.n	8001fec <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d103      	bne.n	8001fca <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001fc8:	e002      	b.n	8001fd0 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	22ff      	movs	r2, #255	@ 0xff
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fe37 	bl	8002c58 <I2C_TransferConfig>
 8001fea:	e011      	b.n	8002010 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	b299      	uxth	r1, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fe24 	bl	8002c58 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b22      	cmp	r3, #34	@ 0x22
 800202c:	d108      	bne.n	8002040 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800203c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800203e:	e01d      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800204e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002050:	e014      	b.n	800207c <I2C_Mem_ISR_DMA+0x288>
 8002052:	bf00      	nop
 8002054:	80002000 	.word	0x80002000
 8002058:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa0a 	bl	8002490 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop

08002090 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <I2C_Slave_ISR_DMA+0x24>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0ca      	b.n	800224a <I2C_Slave_ISR_DMA+0x1ba>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 faa4 	bl	8002624 <I2C_ITSlaveCplt>
 80020dc:	e0b0      	b.n	8002240 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 809a 	beq.w	8002220 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8093 	beq.w	8002220 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0b9b      	lsrs	r3, r3, #14
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0bdb      	lsrs	r3, r3, #15
 800210a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	d07f      	beq.n	8002212 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0bdb      	lsrs	r3, r3, #15
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0b9b      	lsrs	r3, r3, #14
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d128      	bne.n	80021b2 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b28      	cmp	r3, #40	@ 0x28
 800216a:	d108      	bne.n	800217e <I2C_Slave_ISR_DMA+0xee>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002172:	d104      	bne.n	800217e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fbbe 	bl	80028f8 <I2C_ITListenCplt>
 800217c:	e048      	b.n	8002210 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b29      	cmp	r3, #41	@ 0x29
 8002188:	d10e      	bne.n	80021a8 <I2C_Slave_ISR_DMA+0x118>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002190:	d00a      	beq.n	80021a8 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2210      	movs	r2, #16
 8002198:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fd19 	bl	8002bd2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f917 	bl	80023d4 <I2C_ITSlaveSeqCplt>
 80021a6:	e033      	b.n	8002210 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2210      	movs	r2, #16
 80021ae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80021b0:	e034      	b.n	800221c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2210      	movs	r2, #16
 80021b8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f043 0204 	orr.w	r2, r3, #4
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021cc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <I2C_Slave_ISR_DMA+0x14c>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021da:	d11f      	bne.n	800221c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b21      	cmp	r3, #33	@ 0x21
 80021e0:	d002      	beq.n	80021e8 <I2C_Slave_ISR_DMA+0x158>
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b29      	cmp	r3, #41	@ 0x29
 80021e6:	d103      	bne.n	80021f0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2221      	movs	r2, #33	@ 0x21
 80021ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ee:	e008      	b.n	8002202 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b22      	cmp	r3, #34	@ 0x22
 80021f4:	d002      	beq.n	80021fc <I2C_Slave_ISR_DMA+0x16c>
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80021fa:	d102      	bne.n	8002202 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	@ 0x22
 8002200:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4619      	mov	r1, r3
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fbcb 	bl	80029a4 <I2C_ITError>
      if (treatdmanack == 1U)
 800220e:	e005      	b.n	800221c <I2C_Slave_ISR_DMA+0x18c>
 8002210:	e004      	b.n	800221c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2210      	movs	r2, #16
 8002218:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800221a:	e011      	b.n	8002240 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800221c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800221e:	e00f      	b.n	8002240 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	08db      	lsrs	r3, r3, #3
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f809 	bl	8002252 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002268:	2b28      	cmp	r3, #40	@ 0x28
 800226a:	d16a      	bne.n	8002342 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	0c1b      	lsrs	r3, r3, #16
 8002284:	b29b      	uxth	r3, r3
 8002286:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800228a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002298:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80022a6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d138      	bne.n	8002322 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	09db      	lsrs	r3, r3, #7
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	89bb      	ldrh	r3, [r7, #12]
 80022b8:	4053      	eors	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f003 0306 	and.w	r3, r3, #6
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11c      	bne.n	80022fe <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d13b      	bne.n	8002352 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2208      	movs	r2, #8
 80022e6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe faf8 	bl	80008ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80022fc:	e029      	b.n	8002352 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002302:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fd5c 	bl	8002dc4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002314:	89ba      	ldrh	r2, [r7, #12]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fae6 	bl	80008ec <HAL_I2C_AddrCallback>
}
 8002320:	e017      	b.n	8002352 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fd4c 	bl	8002dc4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002334:	89ba      	ldrh	r2, [r7, #12]
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fad6 	bl	80008ec <HAL_I2C_AddrCallback>
}
 8002340:	e007      	b.n	8002352 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2208      	movs	r2, #8
 8002348:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b21      	cmp	r3, #33	@ 0x21
 8002374:	d115      	bne.n	80023a2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2211      	movs	r2, #17
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800238a:	2101      	movs	r1, #1
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fd19 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fadd 	bl	800195a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023a0:	e014      	b.n	80023cc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2212      	movs	r2, #18
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023b6:	2102      	movs	r1, #2
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fd03 	bl	8002dc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fad1 	bl	800196e <HAL_I2C_MasterRxCpltCallback>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0b9b      	lsrs	r3, r3, #14
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e00d      	b.n	8002426 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	0bdb      	lsrs	r3, r3, #15
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002424:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b29      	cmp	r3, #41	@ 0x29
 8002430:	d112      	bne.n	8002458 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2228      	movs	r2, #40	@ 0x28
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2221      	movs	r2, #33	@ 0x21
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002440:	2101      	movs	r1, #1
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fcbe 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fa96 	bl	8001982 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002456:	e017      	b.n	8002488 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b2a      	cmp	r3, #42	@ 0x2a
 8002462:	d111      	bne.n	8002488 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2228      	movs	r2, #40	@ 0x28
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2222      	movs	r2, #34	@ 0x22
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002472:	2102      	movs	r1, #2
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fca5 	bl	8002dc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fa5e 	bl	8000944 <HAL_I2C_SlaveRxCpltCallback>
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2220      	movs	r2, #32
 80024a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b21      	cmp	r3, #33	@ 0x21
 80024b0:	d107      	bne.n	80024c2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024b2:	2101      	movs	r1, #1
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fc85 	bl	8002dc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2211      	movs	r2, #17
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c0:	e00c      	b.n	80024dc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b22      	cmp	r3, #34	@ 0x22
 80024cc:	d106      	bne.n	80024dc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024ce:	2102      	movs	r1, #2
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fc77 	bl	8002dc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2212      	movs	r2, #18
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b4d      	ldr	r3, [pc, #308]	@ (800261c <I2C_ITMasterCplt+0x18c>)
 80024e8:	400b      	ands	r3, r1
 80024ea:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002620 <I2C_ITMasterCplt+0x190>)
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b60      	cmp	r3, #96	@ 0x60
 8002522:	d10b      	bne.n	800253c <I2C_ITMasterCplt+0xac>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	b2db      	uxtb	r3, r3
 8002538:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800253a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb48 	bl	8002bd2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b60      	cmp	r3, #96	@ 0x60
 8002552:	d002      	beq.n	800255a <I2C_ITMasterCplt+0xca>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fa1f 	bl	80029a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002566:	e054      	b.n	8002612 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b21      	cmp	r3, #33	@ 0x21
 8002572:	d124      	bne.n	80025be <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b40      	cmp	r3, #64	@ 0x40
 800258c:	d10b      	bne.n	80025a6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff f9f9 	bl	8001996 <HAL_I2C_MemTxCpltCallback>
}
 80025a4:	e035      	b.n	8002612 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff f9cf 	bl	800195a <HAL_I2C_MasterTxCpltCallback>
}
 80025bc:	e029      	b.n	8002612 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b22      	cmp	r3, #34	@ 0x22
 80025c8:	d123      	bne.n	8002612 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	d10b      	bne.n	80025fc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff f9d8 	bl	80019aa <HAL_I2C_MemRxCpltCallback>
}
 80025fa:	e00a      	b.n	8002612 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff f9ae 	bl	800196e <HAL_I2C_MasterRxCpltCallback>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	fe00e800 	.word	0xfe00e800
 8002620:	ffff0000 	.word	0xffff0000

08002624 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002646:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	2b21      	cmp	r3, #33	@ 0x21
 8002654:	d002      	beq.n	800265c <I2C_ITSlaveCplt+0x38>
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	2b29      	cmp	r3, #41	@ 0x29
 800265a:	d108      	bne.n	800266e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800265c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fbaf 	bl	8002dc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2221      	movs	r2, #33	@ 0x21
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
 800266c:	e019      	b.n	80026a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	2b22      	cmp	r3, #34	@ 0x22
 8002672:	d002      	beq.n	800267a <I2C_ITSlaveCplt+0x56>
 8002674:	7afb      	ldrb	r3, [r7, #11]
 8002676:	2b2a      	cmp	r3, #42	@ 0x2a
 8002678:	d108      	bne.n	800268c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800267a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fba0 	bl	8002dc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2222      	movs	r2, #34	@ 0x22
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
 800268a:	e00a      	b.n	80026a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	2b28      	cmp	r3, #40	@ 0x28
 8002690:	d107      	bne.n	80026a2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002692:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fb94 	bl	8002dc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b8c      	ldr	r3, [pc, #560]	@ (80028f0 <I2C_ITSlaveCplt+0x2cc>)
 80026be:	400b      	ands	r3, r1
 80026c0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa85 	bl	8002bd2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	0b9b      	lsrs	r3, r3, #14
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026fa:	e018      	b.n	800272e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	0bdb      	lsrs	r3, r3, #15
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002716:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d020      	beq.n	800277c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f043 0204 	orr.w	r2, r3, #4
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04a      	beq.n	8002834 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d128      	bne.n	8002806 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b28      	cmp	r3, #40	@ 0x28
 80027be:	d108      	bne.n	80027d2 <I2C_ITSlaveCplt+0x1ae>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027c6:	d104      	bne.n	80027d2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027c8:	6979      	ldr	r1, [r7, #20]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f894 	bl	80028f8 <I2C_ITListenCplt>
 80027d0:	e030      	b.n	8002834 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b29      	cmp	r3, #41	@ 0x29
 80027dc:	d10e      	bne.n	80027fc <I2C_ITSlaveCplt+0x1d8>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027e4:	d00a      	beq.n	80027fc <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9ef 	bl	8002bd2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fded 	bl	80023d4 <I2C_ITSlaveSeqCplt>
 80027fa:	e01b      	b.n	8002834 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	61da      	str	r2, [r3, #28]
 8002804:	e016      	b.n	8002834 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <I2C_ITSlaveCplt+0x204>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002826:	d105      	bne.n	8002834 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8b8 	bl	80029a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f8a7 	bl	80029a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b28      	cmp	r3, #40	@ 0x28
 8002860:	d141      	bne.n	80028e6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002862:	6979      	ldr	r1, [r7, #20]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f847 	bl	80028f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800286a:	e03c      	b.n	80028e6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002874:	d014      	beq.n	80028a0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fdac 	bl	80023d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <I2C_ITSlaveCplt+0x2d0>)
 8002880:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fe f869 	bl	8000970 <HAL_I2C_ListenCpltCallback>
}
 800289e:	e022      	b.n	80028e6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b22      	cmp	r3, #34	@ 0x22
 80028aa:	d10e      	bne.n	80028ca <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f83e 	bl	8000944 <HAL_I2C_SlaveRxCpltCallback>
}
 80028c8:	e00d      	b.n	80028e6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff f84e 	bl	8001982 <HAL_I2C_SlaveTxCpltCallback>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	fe00e800 	.word	0xfe00e800
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a26      	ldr	r2, [pc, #152]	@ (80029a0 <I2C_ITListenCplt+0xa8>)
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d012      	beq.n	8002976 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f043 0204 	orr.w	r2, r3, #4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002976:	f248 0103 	movw	r1, #32771	@ 0x8003
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa22 	bl	8002dc4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2210      	movs	r2, #16
 8002986:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fd ffed 	bl	8000970 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002b78 <I2C_ITError+0x1d4>)
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b28      	cmp	r3, #40	@ 0x28
 80029da:	d005      	beq.n	80029e8 <I2C_ITError+0x44>
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b29      	cmp	r3, #41	@ 0x29
 80029e0:	d002      	beq.n	80029e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80029e6:	d10b      	bne.n	8002a00 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029e8:	2103      	movs	r1, #3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9ea 	bl	8002dc4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2228      	movs	r2, #40	@ 0x28
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a60      	ldr	r2, [pc, #384]	@ (8002b7c <I2C_ITError+0x1d8>)
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80029fe:	e030      	b.n	8002a62 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a00:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9dd 	bl	8002dc4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8e1 	bl	8002bd2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b60      	cmp	r3, #96	@ 0x60
 8002a1a:	d01f      	beq.n	8002a5c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d114      	bne.n	8002a5c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d109      	bne.n	8002a54 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2210      	movs	r2, #16
 8002a46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d039      	beq.n	8002ae4 <I2C_ITError+0x140>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b11      	cmp	r3, #17
 8002a74:	d002      	beq.n	8002a7c <I2C_ITError+0xd8>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b21      	cmp	r3, #33	@ 0x21
 8002a7a:	d133      	bne.n	8002ae4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a8a:	d107      	bne.n	8002a9c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fb2f 	bl	8001104 <HAL_DMA_GetState>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d017      	beq.n	8002adc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	4a33      	ldr	r2, [pc, #204]	@ (8002b80 <I2C_ITError+0x1dc>)
 8002ab2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fade 	bl	8001082 <HAL_DMA_Abort_IT>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04d      	beq.n	8002b68 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ada:	e045      	b.n	8002b68 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f851 	bl	8002b84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ae2:	e041      	b.n	8002b68 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d039      	beq.n	8002b60 <I2C_ITError+0x1bc>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b12      	cmp	r3, #18
 8002af0:	d002      	beq.n	8002af8 <I2C_ITError+0x154>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b22      	cmp	r3, #34	@ 0x22
 8002af6:	d133      	bne.n	8002b60 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b06:	d107      	bne.n	8002b18 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe faf1 	bl	8001104 <HAL_DMA_GetState>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d017      	beq.n	8002b58 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <I2C_ITError+0x1dc>)
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe faa0 	bl	8001082 <HAL_DMA_Abort_IT>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d011      	beq.n	8002b6c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b52:	4610      	mov	r0, r2
 8002b54:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b56:	e009      	b.n	8002b6c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f813 	bl	8002b84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b5e:	e005      	b.n	8002b6c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f80f 	bl	8002b84 <I2C_TreatErrorCallback>
  }
}
 8002b66:	e002      	b.n	8002b6e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b6c:	bf00      	nop
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	ffff0000 	.word	0xffff0000
 8002b7c:	080019e7 	.word	0x080019e7
 8002b80:	08002c1b 	.word	0x08002c1b

08002b84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b60      	cmp	r3, #96	@ 0x60
 8002b96:	d10e      	bne.n	8002bb6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe ff0f 	bl	80019d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bb4:	e009      	b.n	8002bca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fefa 	bl	80019be <HAL_I2C_ErrorCallback>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d103      	bne.n	8002bf0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d007      	beq.n	8002c0e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	619a      	str	r2, [r3, #24]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	2200      	movs	r2, #0
 8002c36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	2200      	movs	r2, #0
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ff9b 	bl	8002b84 <I2C_TreatErrorCallback>
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	4613      	mov	r3, r2
 8002c68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c70:	7a7b      	ldrb	r3, [r7, #9]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	0d5b      	lsrs	r3, r3, #21
 8002c92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c96:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <I2C_TransferConfig+0x60>)
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	ea02 0103 	and.w	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	03ff63ff 	.word	0x03ff63ff

08002cbc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd0:	4a39      	ldr	r2, [pc, #228]	@ (8002db8 <I2C_Enable_IRQ+0xfc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d032      	beq.n	8002d3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002cda:	4a38      	ldr	r2, [pc, #224]	@ (8002dbc <I2C_Enable_IRQ+0x100>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d02d      	beq.n	8002d3c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002ce4:	4a36      	ldr	r2, [pc, #216]	@ (8002dc0 <I2C_Enable_IRQ+0x104>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d028      	beq.n	8002d3c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da03      	bge.n	8002cfa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002cf8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002d0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002d1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d103      	bne.n	8002d2c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d133      	bne.n	8002d9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f043 0320 	orr.w	r3, r3, #32
 8002d38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d3a:	e02e      	b.n	8002d9a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da03      	bge.n	8002d4c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002d4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8002d5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002d6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d103      	bne.n	8002d7e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002d7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d103      	bne.n	8002d8c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d103      	bne.n	8002d9a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	08001bef 	.word	0x08001bef
 8002dbc:	08002091 	.word	0x08002091
 8002dc0:	08001df5 	.word	0x08001df5

08002dc4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00f      	beq.n	8002dfe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002de4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002df2:	2b28      	cmp	r3, #40	@ 0x28
 8002df4:	d003      	beq.n	8002dfe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00f      	beq.n	8002e28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002e0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e1c:	2b28      	cmp	r3, #40	@ 0x28
 8002e1e:	d003      	beq.n	8002e28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002e26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da03      	bge.n	8002e38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002e36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d103      	bne.n	8002e46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d103      	bne.n	8002e54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f043 0320 	orr.w	r3, r3, #32
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	d103      	bne.n	8002e62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d138      	bne.n	8002f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e032      	b.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d139      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e033      	b.n	8002fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2224      	movs	r2, #36	@ 0x24
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40007000 	.word	0x40007000

08002fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffa:	d130      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffc:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003008:	d038      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2232      	movs	r2, #50	@ 0x32
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003030:	e002      	b.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b01      	subs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d102      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f2      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304c:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d110      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306a:	d007      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003074:	4a05      	ldr	r2, [pc, #20]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800307a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000
 8003090:	20000000 	.word	0x20000000
 8003094:	431bde83 	.word	0x431bde83

08003098 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f000 bc02 	b.w	80038b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ac:	4b96      	ldr	r3, [pc, #600]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b6:	4b94      	ldr	r3, [pc, #592]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80e4 	beq.w	8003296 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4c>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	f040 808b 	bne.w	80031f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 8087 	bne.w	80031f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e4:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x64>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e3d9      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_RCC_OscConfig+0x7e>
 800310c:	4b7e      	ldr	r3, [pc, #504]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003114:	e005      	b.n	8003122 <HAL_RCC_OscConfig+0x8a>
 8003116:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003122:	4293      	cmp	r3, r2
 8003124:	d223      	bcs.n	800316e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fd8c 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e3ba      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313a:	4b73      	ldr	r3, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a72      	ldr	r2, [pc, #456]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b70      	ldr	r3, [pc, #448]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	496d      	ldr	r1, [pc, #436]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003158:	4b6b      	ldr	r3, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	4968      	ldr	r1, [pc, #416]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e025      	b.n	80031ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316e:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a65      	ldr	r2, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4960      	ldr	r1, [pc, #384]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318c:	4b5e      	ldr	r3, [pc, #376]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	495b      	ldr	r1, [pc, #364]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fd4c 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e37a      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ba:	f000 fc81 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b51      	ldr	r3, [pc, #324]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4950      	ldr	r1, [pc, #320]	@ (800330c <HAL_RCC_OscConfig+0x274>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <HAL_RCC_OscConfig+0x278>)
 80031d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031da:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fde2 	bl	8000da8 <HAL_InitTick>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d052      	beq.n	8003294 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	e35e      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d032      	beq.n	8003260 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003206:	f7fd fe1f 	bl	8000e48 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800320e:	f7fd fe1b 	bl	8000e48 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e347      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003220:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322c:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b33      	ldr	r3, [pc, #204]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4930      	ldr	r1, [pc, #192]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800324a:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	492b      	ldr	r1, [pc, #172]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
 800325e:	e01a      	b.n	8003296 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003260:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800326c:	f7fd fdec 	bl	8000e48 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003274:	f7fd fde8 	bl	8000e48 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e314      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1dc>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d073      	beq.n	800338a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x21c>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d10e      	bne.n	80032cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d063      	beq.n	8003388 <HAL_RCC_OscConfig+0x2f0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d15f      	bne.n	8003388 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2f1      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x24c>
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e025      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ec:	d114      	bne.n	8003318 <HAL_RCC_OscConfig+0x280>
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a02      	ldr	r2, [pc, #8]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 8003308:	40021000 	.word	0x40021000
 800330c:	0800588c 	.word	0x0800588c
 8003310:	20000000 	.word	0x20000000
 8003314:	20000004 	.word	0x20000004
 8003318:	4ba0      	ldr	r3, [pc, #640]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a9f      	ldr	r2, [pc, #636]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b9d      	ldr	r3, [pc, #628]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a9c      	ldr	r2, [pc, #624]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fd86 	bl	8000e48 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fd fd82 	bl	8000e48 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e2ae      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	4b92      	ldr	r3, [pc, #584]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x2a8>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fd72 	bl	8000e48 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fd6e 	bl	8000e48 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e29a      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x2d0>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d060      	beq.n	8003458 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x310>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d119      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d116      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a8:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x328>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e277      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b76      	ldr	r3, [pc, #472]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	4973      	ldr	r1, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	e040      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033de:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd fd2d 	bl	8000e48 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fd fd29 	bl	8000e48 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e255      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003404:	4b65      	ldr	r3, [pc, #404]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b62      	ldr	r3, [pc, #392]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	495f      	ldr	r1, [pc, #380]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e018      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b5d      	ldr	r3, [pc, #372]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800342c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fd fd09 	bl	8000e48 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7fd fd05 	bl	8000e48 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e231      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344c:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03c      	beq.n	80034de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346c:	4b4b      	ldr	r3, [pc, #300]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd fce4 	bl	8000e48 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7fd fce0 	bl	8000e48 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e20c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCC_OscConfig+0x3ec>
 80034a4:	e01b      	b.n	80034de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	4a3b      	ldr	r2, [pc, #236]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fd fcc7 	bl	8000e48 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fd fcc3 	bl	8000e48 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1ef      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ef      	bne.n	80034be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f0:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003530:	f7fd fc8a 	bl	8000e48 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fd fc86 	bl	8000e48 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1b2      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x4d8>
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	4a0d      	ldr	r2, [pc, #52]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356e:	e029      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d115      	bne.n	80035a4 <HAL_RCC_OscConfig+0x50c>
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	4a03      	ldr	r2, [pc, #12]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a99      	ldr	r2, [pc, #612]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b4:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a95      	ldr	r2, [pc, #596]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d016      	beq.n	80035fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fc3c 	bl	8000e48 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fd fc38 	bl	8000e48 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e162      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	4b89      	ldr	r3, [pc, #548]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ed      	beq.n	80035d4 <HAL_RCC_OscConfig+0x53c>
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fc25 	bl	8000e48 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fc21 	bl	8000e48 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e14b      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003618:	4b7d      	ldr	r3, [pc, #500]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ed      	bne.n	8003602 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b78      	ldr	r3, [pc, #480]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	4a77      	ldr	r2, [pc, #476]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01c      	beq.n	8003686 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364c:	4b70      	ldr	r3, [pc, #448]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800364e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003652:	4a6f      	ldr	r2, [pc, #444]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fd fbf4 	bl	8000e48 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003664:	f7fd fbf0 	bl	8000e48 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e11c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ef      	beq.n	8003664 <HAL_RCC_OscConfig+0x5cc>
 8003684:	e01b      	b.n	80036be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003686:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368c:	4a60      	ldr	r2, [pc, #384]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fd fbd7 	bl	8000e48 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369e:	f7fd fbd3 	bl	8000e48 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ff      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ef      	bne.n	800369e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80f3 	beq.w	80038ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	f040 80c9 	bne.w	8003864 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d12c      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	3b01      	subs	r3, #1
 80036f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d123      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d11b      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d113      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	3b01      	subs	r3, #1
 8003726:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d109      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	3b01      	subs	r3, #1
 800373a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d06b      	beq.n	8003818 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d062      	beq.n	800380c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003746:	4b32      	ldr	r3, [pc, #200]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0ac      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003756:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800375c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003760:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003762:	f7fd fb71 	bl	8000e48 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd fb6d 	bl	8000e48 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e099      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCC_OscConfig+0x77c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037a2:	0212      	lsls	r2, r2, #8
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0552      	lsls	r2, r2, #21
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0652      	lsls	r2, r2, #25
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4912      	ldr	r1, [pc, #72]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e4:	f7fd fb30 	bl	8000e48 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fb2c 	bl	8000e48 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e058      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380a:	e050      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04f      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
 8003810:	40021000 	.word	0x40021000
 8003814:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003818:	4b27      	ldr	r3, [pc, #156]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d144      	bne.n	80038ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b21      	ldr	r3, [pc, #132]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a20      	ldr	r2, [pc, #128]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800383c:	f7fd fb04 	bl	8000e48 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd fb00 	bl	8000e48 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e02c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b18      	ldr	r3, [pc, #96]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x7ac>
 8003862:	e024      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d01f      	beq.n	80038aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003870:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fd fae7 	bl	8000e48 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd fae3 	bl	8000e48 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e00f      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4905      	ldr	r1, [pc, #20]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCC_OscConfig+0x824>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	60cb      	str	r3, [r1, #12]
 80038a8:	e001      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	feeefffc 	.word	0xfeeefffc

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0e7      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b75      	ldr	r3, [pc, #468]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b72      	ldr	r3, [pc, #456]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4970      	ldr	r1, [pc, #448]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b6e      	ldr	r3, [pc, #440]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cf      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4b66      	ldr	r3, [pc, #408]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800391c:	429a      	cmp	r2, r3
 800391e:	d908      	bls.n	8003932 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b63      	ldr	r3, [pc, #396]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4960      	ldr	r1, [pc, #384]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04c      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d121      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0a6      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395e:	4b54      	ldr	r3, [pc, #336]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003976:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e08e      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e086      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b46      	ldr	r3, [pc, #280]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4943      	ldr	r1, [pc, #268]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fd fa4e 	bl	8000e48 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fd fa4a 	bl	8000e48 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e06e      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d208      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	492b      	ldr	r1, [pc, #172]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a06:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d210      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 0207 	bic.w	r2, r3, #7
 8003a1c:	4923      	ldr	r1, [pc, #140]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a42:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4918      	ldr	r1, [pc, #96]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4910      	ldr	r1, [pc, #64]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a74:	f000 f824 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	490b      	ldr	r1, [pc, #44]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1fc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd f985 	bl	8000da8 <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	0800588c 	.word	0x0800588c
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d121      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d11e      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af4:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b00:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d102      	bne.n	8003b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b38:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e004      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d134      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d003      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xac>
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b68:	617b      	str	r3, [r7, #20]
      break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6e:	617b      	str	r3, [r7, #20]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	617b      	str	r3, [r7, #20]
      break;
 8003b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b78:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b86:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	fb03 f202 	mul.w	r2, r3, r2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	0e5b      	lsrs	r3, r3, #25
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	@ 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	080058a4 	.word	0x080058a4
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200

08003bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000000 	.word	0x20000000

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4904      	ldr	r1, [pc, #16]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	0800589c 	.word	0x0800589c

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c20:	f7ff ffda 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0adb      	lsrs	r3, r3, #11
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4904      	ldr	r1, [pc, #16]	@ (8003c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	0800589c 	.word	0x0800589c

08003c48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c60:	f7ff f9b6 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003c64:	6178      	str	r0, [r7, #20]
 8003c66:	e014      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c80:	f7ff f9a6 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003c84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d10b      	bne.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d919      	bls.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ca4:	d902      	bls.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e013      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cac:	2301      	movs	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e010      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b80      	cmp	r3, #128	@ 0x80
 8003cb6:	d902      	bls.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb8:	2303      	movs	r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e00a      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d102      	bne.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e004      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d101      	bne.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 0207 	bic.w	r2, r3, #7
 8003cdc:	4909      	ldr	r1, [pc, #36]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d001      	beq.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40022000 	.word	0x40022000

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d031      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d2c:	d01a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d32:	d814      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f9de 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	74fb      	strb	r3, [r7, #19]
      break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6c:	4b51      	ldr	r3, [pc, #324]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	494e      	ldr	r1, [pc, #312]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 809e 	beq.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d9a:	4b46      	ldr	r3, [pc, #280]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd8:	f7fd f836 	bl	8000e48 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dde:	e009      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fd f832 	bl	8000e48 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	74fb      	strb	r3, [r7, #19]
        break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df4:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ef      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d15a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d019      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e22:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2e:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fc fff2 	bl	8000e48 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fc ffee 	bl	8000e48 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d902      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e7e:	e006      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ec      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e94:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea2:	4904      	ldr	r1, [pc, #16]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec0:	7c7b      	ldrb	r3, [r7, #17]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4a89      	ldr	r2, [pc, #548]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ede:	4b84      	ldr	r3, [pc, #528]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4980      	ldr	r1, [pc, #512]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f00:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 020c 	bic.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	4978      	ldr	r1, [pc, #480]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f22:	4b73      	ldr	r3, [pc, #460]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	496f      	ldr	r1, [pc, #444]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f44:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	4967      	ldr	r1, [pc, #412]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f66:	4b62      	ldr	r3, [pc, #392]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	495e      	ldr	r1, [pc, #376]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f88:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	4956      	ldr	r1, [pc, #344]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003faa:	4b51      	ldr	r3, [pc, #324]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	494d      	ldr	r1, [pc, #308]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d028      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fcc:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4945      	ldr	r1, [pc, #276]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b40      	ldr	r3, [pc, #256]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004002:	d10c      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f882 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800402a:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	492d      	ldr	r1, [pc, #180]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004048:	d106      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404a:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a28      	ldr	r2, [pc, #160]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004054:	60d3      	str	r3, [r2, #12]
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f853 	bl	8004114 <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01c      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	4916      	ldr	r1, [pc, #88]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f830 	bl	8004114 <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040ce:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	4904      	ldr	r1, [pc, #16]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004122:	4b74      	ldr	r3, [pc, #464]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412e:	4b71      	ldr	r3, [pc, #452]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
       ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004146:	4b6b      	ldr	r3, [pc, #428]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
       ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d047      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e044      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d018      	beq.n	800419a <RCCEx_PLLSAI1_Config+0x86>
 8004168:	2b03      	cmp	r3, #3
 800416a:	d825      	bhi.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x62>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d009      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x74>
 8004174:	e020      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004176:	4b5f      	ldr	r3, [pc, #380]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11d      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e01a      	b.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004188:	4b5a      	ldr	r3, [pc, #360]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e013      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419a:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a6:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b6:	e006      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ce:	4b49      	ldr	r3, [pc, #292]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	430b      	orrs	r3, r1
 80041e4:	4943      	ldr	r1, [pc, #268]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d17c      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041f0:	4b40      	ldr	r3, [pc, #256]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a3f      	ldr	r2, [pc, #252]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fc fe24 	bl	8000e48 <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004204:	f7fc fe20 	bl	8000e48 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
        break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ef      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d15f      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004230:	4b30      	ldr	r3, [pc, #192]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004238:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	06d2      	lsls	r2, r2, #27
 8004248:	430a      	orrs	r2, r1
 800424a:	492a      	ldr	r1, [pc, #168]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	610b      	str	r3, [r1, #16]
 8004250:	e027      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d112      	bne.n	800427e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004258:	4b26      	ldr	r3, [pc, #152]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6912      	ldr	r2, [r2, #16]
 800426e:	0852      	lsrs	r2, r2, #1
 8004270:	3a01      	subs	r2, #1
 8004272:	0552      	lsls	r2, r2, #21
 8004274:	430a      	orrs	r2, r1
 8004276:	491f      	ldr	r1, [pc, #124]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
 800427c:	e011      	b.n	80042a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800427e:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004286:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6952      	ldr	r2, [r2, #20]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0652      	lsls	r2, r2, #25
 800429a:	430a      	orrs	r2, r1
 800429c:	4915      	ldr	r1, [pc, #84]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a2:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a13      	ldr	r2, [pc, #76]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ae:	f7fc fdcb 	bl	8000e48 <HAL_GetTick>
 80042b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b4:	e009      	b.n	80042ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b6:	f7fc fdc7 	bl	8000e48 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d902      	bls.n	80042ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	73fb      	strb	r3, [r7, #15]
          break;
 80042c8:	e005      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ef      	beq.n	80042b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4903      	ldr	r1, [pc, #12]	@ (80042f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e049      	b.n	800439e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fbcc 	bl	8000abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 f94a 	bl	80045d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ff      	b.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b14      	cmp	r3, #20
 80043d2:	f200 80f0 	bhi.w	80045b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043d6:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004431 	.word	0x08004431
 80043e0:	080045b7 	.word	0x080045b7
 80043e4:	080045b7 	.word	0x080045b7
 80043e8:	080045b7 	.word	0x080045b7
 80043ec:	08004471 	.word	0x08004471
 80043f0:	080045b7 	.word	0x080045b7
 80043f4:	080045b7 	.word	0x080045b7
 80043f8:	080045b7 	.word	0x080045b7
 80043fc:	080044b3 	.word	0x080044b3
 8004400:	080045b7 	.word	0x080045b7
 8004404:	080045b7 	.word	0x080045b7
 8004408:	080045b7 	.word	0x080045b7
 800440c:	080044f3 	.word	0x080044f3
 8004410:	080045b7 	.word	0x080045b7
 8004414:	080045b7 	.word	0x080045b7
 8004418:	080045b7 	.word	0x080045b7
 800441c:	08004535 	.word	0x08004535
 8004420:	080045b7 	.word	0x080045b7
 8004424:	080045b7 	.word	0x080045b7
 8004428:	080045b7 	.word	0x080045b7
 800442c:	08004575 	.word	0x08004575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f93a 	bl	80046b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]
      break;
 800446e:	e0a5      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f996 	bl	80047a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800448a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	021a      	lsls	r2, r3, #8
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	619a      	str	r2, [r3, #24]
      break;
 80044b0:	e084      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f9ef 	bl	800489c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0208 	orr.w	r2, r2, #8
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0204 	bic.w	r2, r2, #4
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	61da      	str	r2, [r3, #28]
      break;
 80044f0:	e064      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa47 	bl	800498c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800450c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	021a      	lsls	r2, r3, #8
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	61da      	str	r2, [r3, #28]
      break;
 8004532:	e043      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa84 	bl	8004a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0208 	orr.w	r2, r2, #8
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004572:	e023      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fabc 	bl	8004af8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800459e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	021a      	lsls	r2, r3, #8
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80045b4:	e002      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop

080045d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <TIM_Base_SetConfig+0xd4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0x20>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ee:	d108      	bne.n	8004602 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a27      	ldr	r2, [pc, #156]	@ (80046a4 <TIM_Base_SetConfig+0xd4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x52>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x52>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <TIM_Base_SetConfig+0xd8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x52>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <TIM_Base_SetConfig+0xdc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <TIM_Base_SetConfig+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_Base_SetConfig+0xa0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a11      	ldr	r2, [pc, #68]	@ (80046a8 <TIM_Base_SetConfig+0xd8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0xa0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a10      	ldr	r2, [pc, #64]	@ (80046ac <TIM_Base_SetConfig+0xdc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	611a      	str	r2, [r3, #16]
  }
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400

080046b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f023 0201 	bic.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 0302 	bic.w	r3, r3, #2
 80046fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a24      	ldr	r2, [pc, #144]	@ (800479c <TIM_OC1_SetConfig+0xec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_OC1_SetConfig+0x70>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <TIM_OC1_SetConfig+0xf0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC1_SetConfig+0x70>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a22      	ldr	r2, [pc, #136]	@ (80047a4 <TIM_OC1_SetConfig+0xf4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10c      	bne.n	800473a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0308 	bic.w	r3, r3, #8
 8004726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <TIM_OC1_SetConfig+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_OC1_SetConfig+0xa2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <TIM_OC1_SetConfig+0xf0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC1_SetConfig+0xa2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <TIM_OC1_SetConfig+0xf4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d111      	bne.n	8004776 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40014400 	.word	0x40014400

080047a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0210 	bic.w	r2, r3, #16
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <TIM_OC2_SetConfig+0xe8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10d      	bne.n	8004828 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <TIM_OC2_SetConfig+0xe8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_OC2_SetConfig+0x98>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <TIM_OC2_SetConfig+0xec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC2_SetConfig+0x98>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <TIM_OC2_SetConfig+0xf0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d113      	bne.n	8004868 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800484e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400

0800489c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <TIM_OC3_SetConfig+0xe4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10d      	bne.n	800491a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <TIM_OC3_SetConfig+0xe4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_OC3_SetConfig+0x96>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <TIM_OC3_SetConfig+0xe8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_OC3_SetConfig+0x96>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <TIM_OC3_SetConfig+0xec>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d113      	bne.n	800495a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	621a      	str	r2, [r3, #32]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400

0800498c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	031b      	lsls	r3, r3, #12
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a14      	ldr	r2, [pc, #80]	@ (8004a3c <TIM_OC4_SetConfig+0xb0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_OC4_SetConfig+0x74>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a13      	ldr	r2, [pc, #76]	@ (8004a40 <TIM_OC4_SetConfig+0xb4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC4_SetConfig+0x74>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <TIM_OC4_SetConfig+0xb8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d109      	bne.n	8004a14 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	019b      	lsls	r3, r3, #6
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400

08004a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	@ (8004aec <TIM_OC5_SetConfig+0xa4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x6a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a12      	ldr	r2, [pc, #72]	@ (8004af0 <TIM_OC5_SetConfig+0xa8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC5_SetConfig+0x6a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a11      	ldr	r2, [pc, #68]	@ (8004af4 <TIM_OC5_SetConfig+0xac>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d109      	bne.n	8004ac6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400

08004af8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	051b      	lsls	r3, r3, #20
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ba0 <TIM_OC6_SetConfig+0xa8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_OC6_SetConfig+0x6c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a13      	ldr	r2, [pc, #76]	@ (8004ba4 <TIM_OC6_SetConfig+0xac>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC6_SetConfig+0x6c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <TIM_OC6_SetConfig+0xb0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d109      	bne.n	8004b78 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400

08004bac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_TIMEx_PWMN_Start+0x24>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e022      	b.n	8004c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d109      	bne.n	8004bea <HAL_TIMEx_PWMN_Start+0x3e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	e015      	b.n	8004c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d109      	bne.n	8004c04 <HAL_TIMEx_PWMN_Start+0x58>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e008      	b.n	8004c16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e05a      	b.n	8004cd4 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <HAL_TIMEx_PWMN_Start+0x82>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c2c:	e013      	b.n	8004c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d104      	bne.n	8004c3e <HAL_TIMEx_PWMN_Start+0x92>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c3c:	e00b      	b.n	8004c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d104      	bne.n	8004c4e <HAL_TIMEx_PWMN_Start+0xa2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c4c:	e003      	b.n	8004c56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f920 	bl	8004ea4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <HAL_TIMEx_PWMN_Start+0x130>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIMEx_PWMN_Start+0xe6>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c86:	d004      	beq.n	8004c92 <HAL_TIMEx_PWMN_Start+0xe6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ce0 <HAL_TIMEx_PWMN_Start+0x134>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d115      	bne.n	8004cbe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <HAL_TIMEx_PWMN_Start+0x138>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d015      	beq.n	8004cd0 <HAL_TIMEx_PWMN_Start+0x124>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d011      	beq.n	8004cd0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e008      	b.n	8004cd0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e000      	b.n	8004cd2 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e04f      	b.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a21      	ldr	r2, [pc, #132]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a10      	ldr	r2, [pc, #64]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10c      	bne.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e060      	b.n	8004e92 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d115      	bne.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	051b      	lsls	r3, r3, #20
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e040      	b.n	8004f82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fb fe47 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2224      	movs	r2, #36	@ 0x24
 8004f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fa55 	bl	80053e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f826 	bl	8004f8c <UART_SetConfig>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e01b      	b.n	8004f82 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fad4 	bl	8005528 <UART_CheckIdleState>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f90:	b08a      	sub	sp, #40	@ 0x28
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4bb4      	ldr	r3, [pc, #720]	@ (800528c <UART_SetConfig+0x300>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4aa9      	ldr	r2, [pc, #676]	@ (8005290 <UART_SetConfig+0x304>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4aa0      	ldr	r2, [pc, #640]	@ (8005294 <UART_SetConfig+0x308>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d126      	bne.n	8005064 <UART_SetConfig+0xd8>
 8005016:	4ba0      	ldr	r3, [pc, #640]	@ (8005298 <UART_SetConfig+0x30c>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	2b03      	cmp	r3, #3
 8005022:	d81b      	bhi.n	800505c <UART_SetConfig+0xd0>
 8005024:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <UART_SetConfig+0xa0>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005045 	.word	0x08005045
 8005038:	08005055 	.word	0x08005055
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e080      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005044:	2302      	movs	r3, #2
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e07c      	b.n	8005146 <UART_SetConfig+0x1ba>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005052:	e078      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505a:	e074      	b.n	8005146 <UART_SetConfig+0x1ba>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005062:	e070      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a8c      	ldr	r2, [pc, #560]	@ (800529c <UART_SetConfig+0x310>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d138      	bne.n	80050e0 <UART_SetConfig+0x154>
 800506e:	4b8a      	ldr	r3, [pc, #552]	@ (8005298 <UART_SetConfig+0x30c>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d82d      	bhi.n	80050d8 <UART_SetConfig+0x14c>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0xf8>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050b9 	.word	0x080050b9
 8005088:	080050d9 	.word	0x080050d9
 800508c:	080050d9 	.word	0x080050d9
 8005090:	080050d9 	.word	0x080050d9
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050d9 	.word	0x080050d9
 800509c:	080050d9 	.word	0x080050d9
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050c1 	.word	0x080050c1
 80050a8:	080050d9 	.word	0x080050d9
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e042      	b.n	8005146 <UART_SetConfig+0x1ba>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e03e      	b.n	8005146 <UART_SetConfig+0x1ba>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e03a      	b.n	8005146 <UART_SetConfig+0x1ba>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e036      	b.n	8005146 <UART_SetConfig+0x1ba>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e032      	b.n	8005146 <UART_SetConfig+0x1ba>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005290 <UART_SetConfig+0x304>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d12a      	bne.n	8005140 <UART_SetConfig+0x1b4>
 80050ea:	4b6b      	ldr	r3, [pc, #428]	@ (8005298 <UART_SetConfig+0x30c>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050f8:	d01a      	beq.n	8005130 <UART_SetConfig+0x1a4>
 80050fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050fe:	d81b      	bhi.n	8005138 <UART_SetConfig+0x1ac>
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005104:	d00c      	beq.n	8005120 <UART_SetConfig+0x194>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800510a:	d815      	bhi.n	8005138 <UART_SetConfig+0x1ac>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <UART_SetConfig+0x18c>
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005114:	d008      	beq.n	8005128 <UART_SetConfig+0x19c>
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x1ac>
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e012      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005126:	e00e      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512e:	e00a      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e006      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513e:	e002      	b.n	8005146 <UART_SetConfig+0x1ba>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a51      	ldr	r2, [pc, #324]	@ (8005290 <UART_SetConfig+0x304>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d17a      	bne.n	8005246 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005154:	2b08      	cmp	r3, #8
 8005156:	d824      	bhi.n	80051a2 <UART_SetConfig+0x216>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x1d4>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005185 	.word	0x08005185
 8005164:	080051a3 	.word	0x080051a3
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051a3 	.word	0x080051a3
 8005170:	08005193 	.word	0x08005193
 8005174:	080051a3 	.word	0x080051a3
 8005178:	080051a3 	.word	0x080051a3
 800517c:	080051a3 	.word	0x080051a3
 8005180:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe fd34 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b44      	ldr	r3, [pc, #272]	@ (80052a0 <UART_SetConfig+0x314>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fc95 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8107 	beq.w	80053c4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d305      	bcc.n	80051d2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d903      	bls.n	80051da <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d8:	e0f4      	b.n	80053c4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2200      	movs	r2, #0
 80051de:	461c      	mov	r4, r3
 80051e0:	4615      	mov	r5, r2
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	022b      	lsls	r3, r5, #8
 80051ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051f0:	0222      	lsls	r2, r4, #8
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6849      	ldr	r1, [r1, #4]
 80051f6:	0849      	lsrs	r1, r1, #1
 80051f8:	2000      	movs	r0, #0
 80051fa:	4688      	mov	r8, r1
 80051fc:	4681      	mov	r9, r0
 80051fe:	eb12 0a08 	adds.w	sl, r2, r8
 8005202:	eb43 0b09 	adc.w	fp, r3, r9
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005214:	4650      	mov	r0, sl
 8005216:	4659      	mov	r1, fp
 8005218:	f7fa ffd8 	bl	80001cc <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800522a:	d308      	bcc.n	800523e <UART_SetConfig+0x2b2>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005232:	d204      	bcs.n	800523e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	60da      	str	r2, [r3, #12]
 800523c:	e0c2      	b.n	80053c4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005244:	e0be      	b.n	80053c4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524e:	d16a      	bne.n	8005326 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005250:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005254:	2b08      	cmp	r3, #8
 8005256:	d834      	bhi.n	80052c2 <UART_SetConfig+0x336>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x2d4>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005285 	.word	0x08005285
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052ad 	.word	0x080052ad
 800526c:	080052c3 	.word	0x080052c3
 8005270:	080052b3 	.word	0x080052b3
 8005274:	080052c3 	.word	0x080052c3
 8005278:	080052c3 	.word	0x080052c3
 800527c:	080052c3 	.word	0x080052c3
 8005280:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7fe fcb4 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005288:	61f8      	str	r0, [r7, #28]
        break;
 800528a:	e020      	b.n	80052ce <UART_SetConfig+0x342>
 800528c:	efff69f3 	.word	0xefff69f3
 8005290:	40008000 	.word	0x40008000
 8005294:	40013800 	.word	0x40013800
 8005298:	40021000 	.word	0x40021000
 800529c:	40004400 	.word	0x40004400
 80052a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fe fcba 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 80052a8:	61f8      	str	r0, [r7, #28]
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b4c      	ldr	r3, [pc, #304]	@ (80053e0 <UART_SetConfig+0x454>)
 80052ae:	61fb      	str	r3, [r7, #28]
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fe fc05 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 80052b6:	61f8      	str	r0, [r7, #28]
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052be:	61fb      	str	r3, [r7, #28]
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d077      	beq.n	80053c4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	005a      	lsls	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	441a      	add	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b0f      	cmp	r3, #15
 80052ee:	d916      	bls.n	800531e <UART_SetConfig+0x392>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f6:	d212      	bcs.n	800531e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f023 030f 	bic.w	r3, r3, #15
 8005300:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	b29a      	uxth	r2, r3
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	4313      	orrs	r3, r2
 8005312:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	8afa      	ldrh	r2, [r7, #22]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	e052      	b.n	80053c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005324:	e04e      	b.n	80053c4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005326:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800532a:	2b08      	cmp	r3, #8
 800532c:	d827      	bhi.n	800537e <UART_SetConfig+0x3f2>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x3a8>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fe fc4a 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 800535c:	61f8      	str	r0, [r7, #28]
        break;
 800535e:	e014      	b.n	800538a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe fc5c 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <UART_SetConfig+0x454>)
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fe fba7 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005388:	bf00      	nop
    }

    if (pclk != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d019      	beq.n	80053c4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	085a      	lsrs	r2, r3, #1
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	441a      	add	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d909      	bls.n	80053be <UART_SetConfig+0x432>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b0:	d205      	bcs.n	80053be <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	e002      	b.n	80053c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3728      	adds	r7, #40	@ 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053de:	bf00      	nop
 80053e0:	00f42400 	.word	0x00f42400

080053e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01a      	beq.n	80054fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e2:	d10a      	bne.n	80054fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b098      	sub	sp, #96	@ 0x60
 800552c:	af02      	add	r7, sp, #8
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005538:	f7fb fc86 	bl	8000e48 <HAL_GetTick>
 800553c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b08      	cmp	r3, #8
 800554a:	d12e      	bne.n	80055aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005554:	2200      	movs	r2, #0
 8005556:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f88c 	bl	8005678 <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d021      	beq.n	80055aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800557a:	653b      	str	r3, [r7, #80]	@ 0x50
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005584:	647b      	str	r3, [r7, #68]	@ 0x44
 8005586:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800558a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e062      	b.n	8005670 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d149      	bne.n	800564c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f856 	bl	8005678 <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03c      	beq.n	800564c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	623b      	str	r3, [r7, #32]
   return(result);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60fb      	str	r3, [r7, #12]
   return(result);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	617b      	str	r3, [r7, #20]
   return(result);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e5      	bne.n	8005604 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e011      	b.n	8005670 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3758      	adds	r7, #88	@ 0x58
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005688:	e04f      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005690:	d04b      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fb fbd9 	bl	8000e48 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e04e      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d037      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b80      	cmp	r3, #128	@ 0x80
 80056be:	d034      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b40      	cmp	r3, #64	@ 0x40
 80056c4:	d031      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d110      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2208      	movs	r2, #8
 80056da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f838 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2208      	movs	r2, #8
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e029      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005704:	d111      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800570e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f81e 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d0a0      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b095      	sub	sp, #84	@ 0x54
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005778:	643b      	str	r3, [r7, #64]	@ 0x40
 800577a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800577e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	61fb      	str	r3, [r7, #28]
   return(result);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d118      	bne.n	80057fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800580e:	bf00      	nop
 8005810:	3754      	adds	r7, #84	@ 0x54
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <memset>:
 800581a:	4402      	add	r2, r0
 800581c:	4603      	mov	r3, r0
 800581e:	4293      	cmp	r3, r2
 8005820:	d100      	bne.n	8005824 <memset+0xa>
 8005822:	4770      	bx	lr
 8005824:	f803 1b01 	strb.w	r1, [r3], #1
 8005828:	e7f9      	b.n	800581e <memset+0x4>
	...

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4d0d      	ldr	r5, [pc, #52]	@ (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	@ (8005868 <__libc_init_array+0x3c>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2600      	movs	r6, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4d0b      	ldr	r5, [pc, #44]	@ (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	@ (8005870 <__libc_init_array+0x44>)
 8005840:	f000 f818 	bl	8005874 <_init>
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2600      	movs	r6, #0
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	080058dc 	.word	0x080058dc
 8005868:	080058dc 	.word	0x080058dc
 800586c:	080058dc 	.word	0x080058dc
 8005870:	080058e0 	.word	0x080058e0

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
